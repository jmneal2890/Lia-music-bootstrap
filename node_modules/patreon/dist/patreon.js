'use strict';

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.oauth = undefined;

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

var _isomorphicFetch = require('isomorphic-fetch');

var _isomorphicFetch2 = _interopRequireDefault(_isomorphicFetch);

var _oauth2 = require('./oauth');

var _oauth3 = _interopRequireDefault(_oauth2);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var BASE_HOST = 'https://api.patreon.com';
var BASE_PATH = 'oauth2/api';

function patreon(accessToken, config) {
    return function (_req, callback) {
        var options = normalizeRequest(_req);

        // no callback, return stream
        if (typeof callback !== 'function') return callApi(options);

        callApi(options, callback);
    };

    function callApi(options, callback) {
        var _res = void 0;
        (0, _isomorphicFetch2.default)(options.url, _extends({}, options, {
            headers: {
                'Authorization': 'Bearer ' + accessToken
            },
            credentials: 'include'
        })).then(function (res) {
            _res = res;return res.json();
        }).then(function (json) {
            _res.ok ? callback(null, json, _res) : callback(_res.status);
        }).catch(function (err) {
            return callback(err);
        });
    }
}

patreon.oauth = _oauth3.default;
var oauth = exports.oauth = _oauth3.default;

exports.default = patreon;


function normalizeRequest(_req) {
    if (typeof _req === 'string') {
        return {
            url: BASE_HOST + '/' + BASE_PATH + '/' + _stripPreSlash(_req),
            method: 'GET'
        };
    }

    return _extends({}, _req, {
        url: BASE_HOST + '/' + BASE_PATH + _stripPreSlash(_req.url || _req.uri || '')
    });
}

function _stripPreSlash(str) {
    return str.replace(/^\//, '');
}